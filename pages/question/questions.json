[
    {
        "question":"Wie lauten die Zugriffsmodefikatoren?",
        "answers":[
            {
                "text": "# private, - protected, + public",
                "right": false
            },
            {
                "text": "- private, # protected, + public",
                "right": true
            },
            {
                "text": "+ private, # protected, - public",
                "right": false
            },
            {
                "text": "+ private, - protected, # public",
                "right": false
            }
        ]
    },
    {
        "question": "Wodurch kann man die Instanz einer Klasse voneinander unterscheiden?",
        "answers": [
            {
                "text": "durch ihre Attributwerte",
                "right": true
            },
            {
                "text": "durch ihre Namen",
                "right": false
            },
            {
                "text": "durch ihre Inhalte",
                "right": false
            },
            {
                "text": "durch ihre Instanz",
                "right": false
            }
        ]
    },
    {
        "question": "Als was kann man Klassen noch sehen?",
        "answers": [
            {
                "text": "Sammlungen von Instanzen mit unterschiedlichen Objekten",
                "right": false
            },
            {
                "text": "Sammlungen von Variablen mit unterschiedlichen Namen",
                "right": false
            },
            {
                "text": "Sammlungen von Wörtern mit unterschiedlichen Anfangsbuchstaben",
                "right": false
            },
            {
                "text": "Sammlungen von Variablen mit unterschiedlichen Typen",
                "right": true
            }
        ]
    },
    {
        "question": "Was sind Klassen?",
        "answers": [
            {
                "text": "eingeteilte Datentypen mit Schlagwörtern",
                "right": false
            },
            {
                "text": "klar gekennzeichnete Grenzen von Datentypen",
                "right": false
            },
            {
                "text": "selbst definierte Datentypen",
                "right": true
            },
            {
                "text": "selbst definierte Methoden",
                "right": false
            }
        ]
    },
    {
        "question": "Wann ist ein eingeschränkter Zugriff einer Methode mit private sinnvoll?",
        "answers": [
            {
                "text": "wennn Methode nur aus eigener Klasse abgerufen werden soll",
                "right": true
            },
            {
                "text": "wenn Methode von allen Klassen abgerufen werden soll",
                "right": false
            },
            {
                "text": "wenn Methode nicht von eigener Klasse abgerufen werden darf",
                "right": false
            },
            {
                "text": "wenn Methode mit einer anderen verknüpft werden soll",
                "right": false
            }
        ]
    },
    {
        "question": "Was versteht man unter Vererbung?",
        "answers": [
            {
                "text": "ermöglicht Klassen zu ändern",
                "right": false
            },
            {
                "text": "ermöglicht Klassen zu löschen",
                "right": false
            },
            {
                "text": "ermöglicht vorhandene Klassen nach Bedarf zu verringern",
                "right": false
            },
            {
                "text": "ermöglicht vorhandene Klassen nach Bedarf zu erweitern",
                "right":true
            }
        ]
    },
    {
        "question": "Was ist unidirektional?",
        "answers": [
            {
                "text": "es kann von allen Klassen auf alle Objekte zugegriffen werden",
                "right": false
            },
            {
                "text": "Klassen können nicht voneinander erben",
                "right": false
            },
            {
                "text": "nur Objekte der einen Klasse können auf Objekte der anderen zugreifen",
                "right": true
            },
            {
                "text": "Objekte kommunizieren einseitig in einem Kreis",
                "right":false
            }
        ]
    },
    {
        "question": "UML-Notation 'set Methode'",
        "answers": [
            {
                "text": "+ setAttributname(<Parameter> : <Datentyp>)",
                "right": true
            },
            {
                "text": "- setDatentyp(<Parameter> : <Datentyp>)",
                "right": false
            },
            {
                "text": "- setAttributname(<Parameter> : <Datentyp>)",
                "right": false
            },
            {
                "text": "+ setAttributname : Parameter",
                "right":false
            }
        ]
    },
    {
        "question": "UML-Notation 'get Methode'",
        "answers": [
            {
                "text": "- getAttributname():<Datentyp>",
                "right": false
            },
            {
                "text": "- getParameter(<Attribut> : <Datentyp>)",
                "right": false
            },
            {
                "text": "+ getAttributname():<Datentyp>",
                "right": true
            },
            {
                "text": "+ getAttributname : Datentyp",
                "right":false
            }
        ]
    },
    {
        "question": "#protected = direkter Zugriff auf Attribute/Methoden des Objekts nur",
        "answers": [
            {
                "text": "in keiner Klasse möglich",
                "right": false
            },
            {
                "text": "in allen Klassen möglich",
                "right": false
            },
            {
                "text": "außerhalb der Klasse möglich",
                "right": false
            },
            {
                "text": "innerhalb der Klasse möglich",
                "right":true
            }
        ]
    },
    {
        "question": "+public = Zugriff auf Attribute/Methoden des Objekts ist",
        "answers": [
            {
                "text": "nur innerhalb der erbenden Klasse möglich",
                "right": false
            },
            {
                "text": "uneingeschränkt",
                "right": true
            },
            {
                "text": "nur in einer Superklasse möglich",
                "right": false
            },
            {
                "text": "nur in einer einzigen Klasse möglich",
                "right":false
            }
        ]
    },
    {
        "question": "-private = direkter Zugriff auf Attribute/Methoden des Objekts nur",
        "answers": [
            {
                "text": "außerhalb der Klasse möglich",
                "right": false
            },
            {
                "text": "in Superklasse und Subklassen möglich",
                "right": false
            },
            {
                "text": "in allen Klassen möglich",
                "right": false
            },
            {
                "text": "innerhalb der Klasse möglich",
                "right":true
            }
        ]
    },
    {
        "question": "Vorteil objektiorientierter Programmierung",
        "answers": [
            {
                "text": "Modularität -> kann Aufgaben unabhängig lösen",
                "right": true
            },
            {
                "text": "Kapselung -> Objekte sind in sich geschlossen",
                "right": true
            },
            {
                "text": "Wiederverwendbarkeit -> kann Code wiederverwenden",
                "right": true
            },
            {
                "text": "Koplexität -> zerlegen ein Problem in mehrere Aufgaben",
                "right": true
            }
        ]
    },
    {
        "question": "Was entspricht dem Rollenname im Quellcode?",
        "answers": [
            {
                "text": "Objektname",
                "right": true
            },
            {
                "text": "Klassenname",
                "right": false
            },
            {
                "text": "Objekt",
                "right": false
            },
            {
                "text": "Klasse",
                "right": false
            }
        ]
    },
    {
        "question": "Was gibt die Kardinalität an?",
        "answers": [
            {
                "text": "Anzahl der bereits erstellten Objekte",
                "right": false
            },
            {
                "text": "Anzahl der Objekte die erstellt werden müssen",
                "right": false
            },
            {
                "text": "Anzahl der Objekte, die erben",
                "right": false
            },
            {
                "text": "Anzahl der möglichen Objekte",
                "right": true
            }
        ]
    },
    {
        "question": "Wie kann die Aggregation beschrieben werden?",
        "answers": [
            {
                "text": "'ist kein Teil von', 'besteht nicht aus'",
                "right": false
            },
            {
                "text": "'ist Teil von', 'besteht aus'",
                "right": true
            },
            {
                "text": "'verbindet sich mit'",
                "right": false
            },
            {
                "text": "'verringert', 'reduziert'",
                "right": false
            }
        ]
    },
    {
        "question": "Wie werden Assoziationen im Klassendiagramm gekennzeichnet?",
        "answers": [
            {
                "text": "ausgefüllte Raute",
                "right": false
            },
            {
                "text": "leerer Pfeil",
                "right": false
            },
            {
                "text": "ausgefüllter Pfeil",
                "right": true
            },
            {
                "text": "leere Raute",
                "right": false
            }
        ]
    },
    {
        "question": "Was sind Attribute?",
        "answers": [
            {
                "text": "Eigenschaften einer Klasse",
                "right": false
            },
            {
                "text": "Eigenschaften eins Objekts",
                "right": true
            },
            {
                "text": "Datentypen eines Klasse",
                "right": false
            },
            {
                "text": "Datentypen eines Objekts",
                "right": false
            }
        ]
    },
    {
        "question": "Was versteht man unter bidirektional?",
        "answers": [
            {
                "text": "der Zugriff auf Objekte wird unterbunden",
                "right": false
            },
            {
                "text": "es kann je nur einer auf ein anderes Objekt zugreifen",
                "right": false
            },
            {
                "text": "nur ein Objekt kann auf ein anders zugreifen",
                "right": false
            },
            {
                "text": "beide Objekte könenn aufeinander zugreifen",
                "right": true
            }
        ]
    },
    {
        "question": "Wie nennt sich der Prozess der Kapselung?",
        "answers": [
            {
                "text": "data hiding",
                "right": true
            },
            {
                "text": "abstract hiding",
                "right": false
            },
            {
                "text": "class hiding",
                "right": false
            },
            {
                "text": "object hiding",
                "right": false
            }
        ]
    },
    {
        "question": "Was sind die vier Grundpfeiler der OOP?",
        "answers": [
            {
                "text": "Assoziation, Kardinalität, Vererbung, Kapselung",
                "right": false
            },
            {
                "text": "Kapselung, Assoziation, Vererbung, Polymorphie",
                "right": true
            },
            {
                "text": "Polymorphie, Kapselung, Vererbung, Komposition",
                "right": false
            },
            {
                "text": "Kapselung, Rollenname, Komposition, Assoziation",
                "right": false
            }
        ]
    }
]