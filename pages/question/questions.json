[
    {
        "question":"Wie lauten die Zugriffsmodefikatoren?",
        "answers":[
            {
                "text": "# private, - protected, + public",
                "right": false
            },
            {
                "text": "- private, # protected, + public",
                "right": true
            },
            {
                "text": "+ private, # protected, - public",
                "right": false
            },
            {
                "text": "+ private, - protected, # public",
                "right": false
            }
        ]
    },
    {
        "question": "Wodurch kann man die Instanz einer Klasse voneinander unterscheiden?",
        "answers": [
            {
                "text": "durch ihre Attributwerte",
                "right": true
            },
            {
                "text": "durch ihre Namen",
                "right": false
            },
            {
                "text": "durch ihre Inhalte",
                "right": false
            },
            {
                "text": "durch ihre Instanz",
                "right": false
            }
        ]
    },
    {
        "question": "Als was kann man Klassen noch sehen?",
        "answers": [
            {
                "text": "Sammlungen von Instanzen mit unterschiedlichen Objekten",
                "right": false
            },
            {
                "text": "Sammlungen von Variablen mit unterschiedlichen Namen",
                "right": false
            },
            {
                "text": "Sammlungen von Wörtern mit unterschiedlichen Anfangsbuchstaben",
                "right": false
            },
            {
                "text": "Sammlungen von Variablen mit unterschiedlichen Typen",
                "right": true
            }
        ]
    },
    {
        "question": "Was sind Klassen?",
        "answers": [
            {
                "text": "eingeteilte Datentypen mit Schlagwörtern",
                "right": false
            },
            {
                "text": "klar gekennzeichnete Grenzen von Datentypen",
                "right": false
            },
            {
                "text": "selbst definierte Datentypen",
                "right": true
            },
            {
                "text": "selbst definierte Methoden",
                "right": false
            }
        ]
    },
    {
        "question": "Wann ist ein eingeschränkter Zugriff einer Methode mit private sinnvoll?",
        "answers": [
            {
                "text": "wennn Methode nur aus eigener Klasse abgerufen werden soll",
                "right": true
            },
            {
                "text": "wenn Methode von allen Klassen abgerufen werden soll",
                "right": false
            },
            {
                "text": "wenn Methode nicht von eigener Klasse abgerufen werden darf",
                "right": false
            },
            {
                "text": "wenn Methode mit einer anderen verknüpft werden soll",
                "right": false
            }
        ]
    },
    {
        "question": "Was versteht man unter Vererbung?",
        "answers": [
            {
                "text": "ermöglicht Klassen zu ändern",
                "right": false
            },
            {
                "text": "ermöglicht Klassen zu löschen",
                "right": false
            },
            {
                "text": "ermöglicht vorhandene Klassen nach Bedarf zu verringern",
                "right": false
            },
            {
                "text": "ermöglicht vorhandene Klassen nach Bedarf zu erweitern",
                "right":true
            }
        ]
    },
    {
        "question": "Was ist unidirektional?",
        "answers": [
            {
                "text": "es kann von allen Klassen auf alle Objekte zugegriffen werden",
                "right": false
            },
            {
                "text": "Klassen können nicht voneinander erben",
                "right": false
            },
            {
                "text": "nur Objekte der einen Klasse können auf Objekte der anderen zugreifen",
                "right": true
            },
            {
                "text": "Objekte kommunizieren einseitig in einem Kreis",
                "right":false
            }
        ]
    },
    {
        "question": "UML-Notaion 'set Methode'",
        "answers": [
            {
                "text": "+ setAttributname(<Parameter> : <Datentyp>)",
                "right": true
            },
            {
                "text": "- setDatentyp(<Parameter> : <Datentyp>)",
                "right": false
            },
            {
                "text": "- setAttributname(<Parameter> : <Datentyp>)",
                "right": false
            },
            {
                "text": "+ setAttributname : Parameter",
                "right":false
            }
        ]
    },
    {
        "question": "UML-Notaion 'get Methode'",
        "answers": [
            {
                "text": "- getAttributname():<Datentyp>",
                "right": false
            },
            {
                "text": "- getParameter(<Attribut> : <Datentyp>)",
                "right": false
            },
            {
                "text": "+ getAttributname():<Datentyp>",
                "right": true
            },
            {
                "text": "+ getAttributname : Datentyp",
                "right":false
            }
        ]
    },
    {
        "question": "#protected = direkter Zugriff auf Attribute/Methoden des Objekts nur",
        "answers": [
            {
                "text": "in keiner Klasse möglich",
                "right": false
            },
            {
                "text": "in allen Klassen möglich",
                "right": false
            },
            {
                "text": "außerhalb der Klasse möglich",
                "right": false
            },
            {
                "text": "innerhalb der Klasse möglich",
                "right":true
            }
        ]
    },
    {
        "question": "+public = Zugriff auf Attribute/Methoden des Objekts ist",
        "answers": [
            {
                "text": "nur innerhalb der erbenden Klasse möglich",
                "right": false
            },
            {
                "text": "uneingeschränkt",
                "right": true
            },
            {
                "text": "nur in einer Superklasse möglich",
                "right": false
            },
            {
                "text": "nur in einer einzigen Klasse möglich",
                "right":false
            }
        ]
    },
    {
        "question": "-private = direkter Zugriff auf Attribute/Methoden des Objekts nur",
        "answers": [
            {
                "text": "außerhalb der Klasse möglich",
                "right": false
            },
            {
                "text": "in Superklasse und Subklassen möglich",
                "right": false
            },
            {
                "text": "in allen Klassen möglich",
                "right": false
            },
            {
                "text": "innerhalb der Klasse möglich",
                "right":true
            }
        ]
    }
]